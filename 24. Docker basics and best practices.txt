What is Docker?
==============	
				-------------------------------------------------------------------------
				| "Containerization is a concept or technology and Docker Implements it" |
				------------------------------------------------------------------------
Docker is a containerization platform that provides easy way to containerize your applications, which means, using Docker you can build container 
images, run the images to create containers and also push these containers to container registries such as Docker Hub, Quay.io and so on.

Docker LifeCycle
================
There are three important things,

    docker build	-> builds docker images from Dockerfile
    docker run		-> runs container from docker images
    docker push		-> push the container image to public/private registries to share the docker images

Docker terminology 
==================
	- Docker daemon	-> Service that listens for Docker API requests and manages Docker objects and it can also communicate with other daemons to manage Docker services.
	- Docker client	-> Primary way that Docker users interact with Docker. It takes the commands (using Docker API) from the user and sends them to the daemon
	- Docker Desktop-> An easy-to-install application for all OSs' environment that enables building and sharing containerized applications and microservices. 
			   It includes the Docker daemon (dockerd), the client (docker), Compose, Content Trust, Kubernetes, and Credential Helper. 
	- Docker registries -> A storage for Docker images. Ex. Docker Hub which is a public/default registry of Docker that anyone can use
			       Private registries can be created and used instead (via PUSH and PULL commands)

	- Dockerfile	-> A file where you provide the steps to build your Docker Image.
			   Each instruction in a Dockerfile creates a layer in the image
			   Changing something in the Dockerfile a rebuilding it, will rebuild the changed parts only
	- Images	-> Are a read-only template with instructions for creating a Docker container. Often, an image is based on another image, 
			   with some additional customization

Installation and usage
=====================
 After installing Docker make sure that:
	- The daemon is running 						"THIS IS A DRWABACK BECAUSE DOCKER DAEMON IS A SINGLE PROCESS, SINGLE POINT OF FAILURE"
		- if not, run and enable it
	- The user has sufficient permissions to interact with docker 		"THIS IS A DRAWBACK OF DOCKER AS IT IS ALLOW FOR HARMFUL HACKS"
		- if not, add the user to the group "docker" 

Commands
========
	docker run hello-world			check the installation

	- create a folder, dockerfile, app.py
	- write the dockerfile 
	
	docker build -t <tag> .			build and create a docker image 
	docker run <tag>			Run the image


	docker images				List the available images
	docker push <tag>			Pushes the images into docker hub account


Follow "https://github.com/iam-veeramalla/Docker-Zero-to-Hero" github repo for examples


What is a container and why it is lightweight?
==============================================
- A container is a package of software that is needed to run an application code, runtime system tools, libraries and settings.
- It is light weight because it does not need an operating system. It only has the minimum system dependencies (files and folders) that allows the user to use it and share the 
  host kernel and libraries
- It provides less isolation than VMs
- It is portable 
- It is more manageable than VMs
- It is more efficient and reduces the complexity of the workflow a lot, as one person writes everything in a dockerfile and the other just build and run this image to get a running App

The container uses the host's:
	- File system			-> Via bind mount
	- System Calls			-> That's how the container gets access to IO, CPU, etc
	- Network Stack			-> This is how the host and the container can communicate 
	- Namespaces			-> A way to isolate the containers' environment including Filesystem, processes, network
	- Cgroups			-> A way to limit the access of a container to the host's resources 

The container base image usually includes:
	- /root				-> Home dir of root user
	- /bin				-> Executables 
	- /sbin				-> System executables
	- /etc				-> config files of services
	- /var				-> Variable data like logs
	- /lib				-> Libraries that the binary executables need
	- /usr				-> User's files like applications, documentations, libraries, etc



	 